/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package app;

import java.awt.Font;
import java.awt.Frame;
import java.sql.Connection;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.RowSorter;
import javax.swing.SortOrder;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableRowSorter;

/**
 *
 * @author FadilaRizka
 */
public class SPK extends javax.swing.JFrame {

    /**
     * Creates new form SPK
     */
    public SPK() {
        initComponents();
        setLocationRelativeTo(null);// Mengatur panel agar ditengah
        setExtendedState(Frame.MAXIMIZED_BOTH); //mngatur panel maksimal

        loadDataAlternatif();
        loadDataKriteria();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel3 = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jTabbedPane6 = new javax.swing.JTabbedPane();
        jPanel14 = new javax.swing.JPanel();
        jPanel15 = new javax.swing.JPanel();
        btnTambahK = new app.ButtonTrans();
        btnHapusK = new app.ButtonTrans();
        btnRefreshK = new app.ButtonTrans();
        btnUpdateK = new app.ButtonTrans();
        jPanel16 = new javax.swing.JPanel();
        jPanel27 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        rtfcariKriteria = new app.RoundedTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabelKriteria = new javax.swing.JTable();
        jPanel28 = new javax.swing.JPanel();
        jPanel34 = new javax.swing.JPanel();
        btnTambahAlternatif = new app.ButtonTrans();
        btnHapusAlternatif = new app.ButtonTrans();
        btnRefreshA = new app.ButtonTrans();
        btnUpdateAlternatif = new app.ButtonTrans();
        jPanel35 = new javax.swing.JPanel();
        jPanel36 = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        rtfcariAlternatif = new app.RoundedTextField();
        jScrollPane2 = new javax.swing.JScrollPane();
        tabelAlternatif = new javax.swing.JTable();
        jPanel32 = new javax.swing.JPanel();
        jPanel33 = new javax.swing.JPanel();
        btnRangking = new app.ButtonTrans();
        jScrollPane3 = new javax.swing.JScrollPane();
        tabelSPK = new javax.swing.JTable();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setBackground(new java.awt.Color(255, 255, 255));

        jPanel3.setBackground(new java.awt.Color(255, 255, 255));

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel3.setFont(new java.awt.Font("Segoe UI", 1, 36)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(0, 0, 255));
        jLabel3.setText("SPK PEMILIHAN MOBIL BEKAS TERBAIK");

        jButton1.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8_double_left_50px.png"))); // NOI18N
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(70, 70, 70)
                .addComponent(jLabel3)
                .addContainerGap(190, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(21, Short.MAX_VALUE)
                .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(8, 8, 8))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane6.setBackground(new java.awt.Color(255, 255, 255));
        jTabbedPane6.setFont(new java.awt.Font("Segoe UI", 0, 36)); // NOI18N

        jPanel14.setBackground(new java.awt.Color(255, 255, 255));
        jPanel14.setLayout(new java.awt.BorderLayout());

        jPanel15.setBackground(new java.awt.Color(255, 255, 255));
        jPanel15.setPreferredSize(new java.awt.Dimension(887, 70));

        btnTambahK.setText("Add");
        btnTambahK.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnTambahK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahKActionPerformed(evt);
            }
        });

        btnHapusK.setText("Delete");
        btnHapusK.setEnabled(false);
        btnHapusK.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnHapusK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusKActionPerformed(evt);
            }
        });

        btnRefreshK.setText("Refresh");
        btnRefreshK.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnRefreshK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshKActionPerformed(evt);
            }
        });

        btnUpdateK.setText("Update ");
        btnUpdateK.setEnabled(false);
        btnUpdateK.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnUpdateK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateKActionPerformed(evt);
            }
        });

        jPanel16.setBackground(new java.awt.Color(255, 255, 255));

        jPanel27.setBackground(new java.awt.Color(255, 255, 255));
        jPanel27.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel2.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8_Google_Web_Search_30px.png"))); // NOI18N
        jPanel27.add(jLabel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 20, -1, -1));

        rtfcariKriteria.setText("Cari Kriteria");
        rtfcariKriteria.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rtfcariKriteriaFocusLost(evt);
            }
        });
        rtfcariKriteria.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rtfcariKriteriaMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                rtfcariKriteriaMouseExited(evt);
            }
        });
        rtfcariKriteria.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtfcariKriteriaActionPerformed(evt);
            }
        });
        rtfcariKriteria.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rtfcariKriteriaKeyReleased(evt);
            }
        });
        jPanel27.add(rtfcariKriteria, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 360, 60));

        javax.swing.GroupLayout jPanel16Layout = new javax.swing.GroupLayout(jPanel16);
        jPanel16.setLayout(jPanel16Layout);
        jPanel16Layout.setHorizontalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel16Layout.createSequentialGroup()
                .addGap(0, 15, Short.MAX_VALUE)
                .addComponent(jPanel27, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel16Layout.setVerticalGroup(
            jPanel16Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel27, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jPanel15Layout = new javax.swing.GroupLayout(jPanel15);
        jPanel15.setLayout(jPanel15Layout);
        jPanel15Layout.setHorizontalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel15Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnTambahK, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHapusK, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdateK, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRefreshK, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel15Layout.setVerticalGroup(
            jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel15Layout.createSequentialGroup()
                .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel15Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel16, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel15Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel15Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnHapusK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdateK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnRefreshK, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnTambahK, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel14.add(jPanel15, java.awt.BorderLayout.PAGE_START);

        tabelKriteria.setBackground(new java.awt.Color(153, 204, 255));
        tabelKriteria.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        tabelKriteria.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "ID", "KRITERIA", "BOBOT", "LABEL"
            }
        ));
        tabelKriteria.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        tabelKriteria.setGridColor(new java.awt.Color(51, 51, 255));
        tabelKriteria.setMaximumSize(new java.awt.Dimension(2147483647, 300));
        tabelKriteria.setMinimumSize(new java.awt.Dimension(105, 300));
        tabelKriteria.setName(""); // NOI18N
        tabelKriteria.setOpaque(false);
        tabelKriteria.setPreferredSize(new java.awt.Dimension(300, 300));
        tabelKriteria.setRowHeight(50);
        tabelKriteria.setSelectionBackground(new java.awt.Color(204, 204, 204));
        tabelKriteria.setShowHorizontalLines(true);
        tabelKriteria.setShowVerticalLines(true);
        tabelKriteria.setUpdateSelectionOnSort(false);
        tabelKriteria.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelKriteriaMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(tabelKriteria);

        jPanel14.add(jScrollPane1, java.awt.BorderLayout.CENTER);

        jTabbedPane6.addTab("Kriteria", jPanel14);

        jPanel28.setBackground(new java.awt.Color(255, 255, 255));
        jPanel28.setLayout(new java.awt.BorderLayout());

        jPanel34.setBackground(new java.awt.Color(255, 255, 255));
        jPanel34.setPreferredSize(new java.awt.Dimension(887, 70));

        btnTambahAlternatif.setText("Add");
        btnTambahAlternatif.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnTambahAlternatif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTambahAlternatifActionPerformed(evt);
            }
        });

        btnHapusAlternatif.setText("Delete");
        btnHapusAlternatif.setEnabled(false);
        btnHapusAlternatif.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnHapusAlternatif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusAlternatifActionPerformed(evt);
            }
        });

        btnRefreshA.setText("Refresh");
        btnRefreshA.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnRefreshA.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRefreshAActionPerformed(evt);
            }
        });

        btnUpdateAlternatif.setText("Update ");
        btnUpdateAlternatif.setEnabled(false);
        btnUpdateAlternatif.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnUpdateAlternatif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateAlternatifActionPerformed(evt);
            }
        });

        jPanel35.setBackground(new java.awt.Color(255, 255, 255));

        jPanel36.setBackground(new java.awt.Color(255, 255, 255));
        jPanel36.setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        jLabel4.setIcon(new javax.swing.ImageIcon(getClass().getResource("/image/icons8_Google_Web_Search_30px.png"))); // NOI18N
        jPanel36.add(jLabel4, new org.netbeans.lib.awtextra.AbsoluteConstraints(330, 10, -1, -1));

        rtfcariAlternatif.setText("Cari Alternatif");
        rtfcariAlternatif.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                rtfcariAlternatifFocusLost(evt);
            }
        });
        rtfcariAlternatif.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                rtfcariAlternatifMouseClicked(evt);
            }
            public void mouseExited(java.awt.event.MouseEvent evt) {
                rtfcariAlternatifMouseExited(evt);
            }
        });
        rtfcariAlternatif.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rtfcariAlternatifActionPerformed(evt);
            }
        });
        rtfcariAlternatif.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                rtfcariAlternatifKeyReleased(evt);
            }
        });
        jPanel36.add(rtfcariAlternatif, new org.netbeans.lib.awtextra.AbsoluteConstraints(20, 0, 360, 60));

        javax.swing.GroupLayout jPanel35Layout = new javax.swing.GroupLayout(jPanel35);
        jPanel35.setLayout(jPanel35Layout);
        jPanel35Layout.setHorizontalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel35Layout.createSequentialGroup()
                .addGap(0, 15, Short.MAX_VALUE)
                .addComponent(jPanel36, javax.swing.GroupLayout.PREFERRED_SIZE, 386, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel35Layout.setVerticalGroup(
            jPanel35Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel36, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        javax.swing.GroupLayout jPanel34Layout = new javax.swing.GroupLayout(jPanel34);
        jPanel34.setLayout(jPanel34Layout);
        jPanel34Layout.setHorizontalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel34Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnTambahAlternatif, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnHapusAlternatif, javax.swing.GroupLayout.PREFERRED_SIZE, 136, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnUpdateAlternatif, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnRefreshA, javax.swing.GroupLayout.PREFERRED_SIZE, 137, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(jPanel35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        jPanel34Layout.setVerticalGroup(
            jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel34Layout.createSequentialGroup()
                .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel34Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jPanel35, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel34Layout.createSequentialGroup()
                        .addGap(20, 20, 20)
                        .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                            .addGroup(jPanel34Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                                .addComponent(btnHapusAlternatif, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(btnUpdateAlternatif, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(btnRefreshA, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addComponent(btnTambahAlternatif, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );

        jPanel28.add(jPanel34, java.awt.BorderLayout.PAGE_START);

        tabelAlternatif.setBackground(new java.awt.Color(153, 204, 255));
        tabelAlternatif.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        tabelAlternatif.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "ID", "ALTERNATIF", "HARGA", "TAHUN", "MESIN", "SEATER", "TRANSMISI"
            }
        ));
        tabelAlternatif.setGridColor(new java.awt.Color(51, 51, 255));
        tabelAlternatif.setRowHeight(50);
        tabelAlternatif.setSelectionBackground(new java.awt.Color(204, 204, 204));
        tabelAlternatif.setShowHorizontalLines(true);
        tabelAlternatif.setShowVerticalLines(true);
        tabelAlternatif.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tabelAlternatifMouseClicked(evt);
            }
        });
        jScrollPane2.setViewportView(tabelAlternatif);

        jPanel28.add(jScrollPane2, java.awt.BorderLayout.CENTER);

        jTabbedPane6.addTab("Alternatif", jPanel28);

        jPanel32.setBackground(new java.awt.Color(255, 255, 255));
        jPanel32.setLayout(new java.awt.BorderLayout());

        jPanel33.setBackground(new java.awt.Color(255, 255, 255));
        jPanel33.setPreferredSize(new java.awt.Dimension(887, 50));

        btnRangking.setText("Lihat Produk Terbaik");
        btnRangking.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N
        btnRangking.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRangkingActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel33Layout = new javax.swing.GroupLayout(jPanel33);
        jPanel33.setLayout(jPanel33Layout);
        jPanel33Layout.setHorizontalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel33Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRangking, javax.swing.GroupLayout.PREFERRED_SIZE, 301, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(692, Short.MAX_VALUE))
        );
        jPanel33Layout.setVerticalGroup(
            jPanel33Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel33Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(btnRangking, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPanel32.add(jPanel33, java.awt.BorderLayout.PAGE_START);

        tabelSPK.setBackground(new java.awt.Color(153, 204, 255));
        tabelSPK.setFont(new java.awt.Font("Segoe UI", 0, 24)); // NOI18N
        tabelSPK.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "NO", "MOBIL", "HASIL"
            }
        ));
        tabelSPK.setGridColor(new java.awt.Color(51, 51, 255));
        tabelSPK.setRowHeight(50);
        tabelSPK.setSelectionBackground(new java.awt.Color(204, 204, 204));
        tabelSPK.setShowHorizontalLines(true);
        tabelSPK.setShowVerticalLines(true);
        jScrollPane3.setViewportView(tabelSPK);

        jPanel32.add(jScrollPane3, java.awt.BorderLayout.CENTER);

        jTabbedPane6.addTab("SPK", jPanel32);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jTabbedPane6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 999, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 535, Short.MAX_VALUE))
            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                    .addGap(0, 74, Short.MAX_VALUE)
                    .addComponent(jTabbedPane6, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        getContentPane().add(jPanel3, java.awt.BorderLayout.CENTER);

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void roundedTextField5FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_roundedTextField5FocusLost

    }//GEN-LAST:event_roundedTextField5FocusLost

    private void roundedTextField5MouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roundedTextField5MouseClicked

    }//GEN-LAST:event_roundedTextField5MouseClicked

    private void roundedTextField5MouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_roundedTextField5MouseExited

    }//GEN-LAST:event_roundedTextField5MouseExited

    private void roundedTextField5ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_roundedTextField5ActionPerformed

    }//GEN-LAST:event_roundedTextField5ActionPerformed

    private void roundedTextField5KeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_roundedTextField5KeyReleased

    }//GEN-LAST:event_roundedTextField5KeyReleased

    private void btnTambahKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahKActionPerformed
        // TODO add your handling code here:
        TambahKriteria k = new TambahKriteria(this, true);
        k.setVisible(true);
    }//GEN-LAST:event_btnTambahKActionPerformed

    private void btnHapusKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusKActionPerformed
        // TODO add your handling code here:

        Object[] str = {"Ya, Hapus dong", "Tidak"};
        int pilihan = JOptionPane.showOptionDialog(
                this,
                "Apakah Anda yakin ingin menghapus data?",
                "Hapus data?",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null, str,
                0);
        if (pilihan == 0) {
            try {
                int i = tabelKriteria.getSelectedRow();
                Object id = tabelKriteria.getValueAt(i, 0);
                String q = "DELETE FROM kriteria WHERE id='" + id + "'";
                //System.out.println(q);
                Connection koneksi = Koneksi.konekKeDB();
                Statement st = koneksi.createStatement();
                st.executeUpdate(q);
                SPK.loadDataKriteria();
            } catch (Exception e) {
            }
        } else {

        }
    }//GEN-LAST:event_btnHapusKActionPerformed

    private void btnRefreshKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshKActionPerformed
        // TODO add your handling code here:
        tabelKriteria.clearSelection();
        btnHapusK.setEnabled(false);
        btnUpdateK.setEnabled(false);
    }//GEN-LAST:event_btnRefreshKActionPerformed

    private void btnUpdateKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateKActionPerformed
        // TODO add your handling code here:
        UpdateKriteria uk = new UpdateKriteria(this, true);

        int i = tabelKriteria.getSelectedRow();
        String id = tabelKriteria.getValueAt(i, 0).toString();
        String kriteria = tabelKriteria.getValueAt(i, 1).toString();
        String bobot = tabelKriteria.getValueAt(i, 2).toString();
        String label = tabelKriteria.getValueAt(i, 3).toString();
        int id_int = Integer.parseInt(id);

        uk.setId(id_int);
        uk.setKriteria(kriteria);
        uk.setBobot(bobot);
        uk.setLabel(label);

        uk.setVisible(true);
    }//GEN-LAST:event_btnUpdateKActionPerformed

    private void rtfcariKriteriaFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rtfcariKriteriaFocusLost
        // TODO add your handling code here:
        rtfcariKriteria.setText("Cari Kriteria");
    }//GEN-LAST:event_rtfcariKriteriaFocusLost

    private void rtfcariKriteriaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rtfcariKriteriaMouseClicked
        // TODO add your handling code here:
        if (rtfcariKriteria.getText().equalsIgnoreCase("Cari Kriteria")) {
            rtfcariKriteria.setText("");
        }
    }//GEN-LAST:event_rtfcariKriteriaMouseClicked

    private void rtfcariKriteriaMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rtfcariKriteriaMouseExited
        // TODO add your handling code here:
    }//GEN-LAST:event_rtfcariKriteriaMouseExited

    private void rtfcariKriteriaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtfcariKriteriaActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rtfcariKriteriaActionPerformed

    private void rtfcariKriteriaKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rtfcariKriteriaKeyReleased
        // TODO add your handling code here:
        String key = rtfcariKriteria.getText();
        String where = " WHERE "
                + "kriteria LIKE '%" + key + "%' OR "
                + "bobot LIKE '%" + key + "%' OR "
                + "label LIKE '%" + key + "%'";
        cariKriteria(where);
    }//GEN-LAST:event_rtfcariKriteriaKeyReleased

    private void tabelKriteriaMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelKriteriaMouseClicked
        // TODO add your handling code here:
        int i = tabelKriteria.getSelectedRow();
        if (i != -1) {
            btnHapusK.setEnabled(true);
            btnUpdateK.setEnabled(true);
        }
    }//GEN-LAST:event_tabelKriteriaMouseClicked

    private void btnRangkingActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRangkingActionPerformed
        // TODO add your handling code here:
        SPK_SAW();
    }//GEN-LAST:event_btnRangkingActionPerformed

    private void btnTambahAlternatifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTambahAlternatifActionPerformed
        TambahAlternatif A = new TambahAlternatif(this, true);
        A.setVisible(true);
    }//GEN-LAST:event_btnTambahAlternatifActionPerformed

    private void btnHapusAlternatifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusAlternatifActionPerformed
        Object[] str = {"Ya, Hapus dong", "Tidak"};
        int pilih = JOptionPane.showOptionDialog(
                this,
                "Apakah Anda yakin ingin menghapus data?",
                "Hapus data?",
                JOptionPane.YES_NO_OPTION,
                JOptionPane.INFORMATION_MESSAGE,
                null, str,
                0);
        if (pilih == 0) {
            try {
                int i = tabelAlternatif.getSelectedRow();
                Object id = tabelAlternatif.getValueAt(i, 0);
                String q = "DELETE FROM alternatif WHERE id='" + id + "'";
                //System.out.println(q);
                Connection koneksi = Koneksi.konekKeDB();
                Statement st = koneksi.createStatement();
                st.executeUpdate(q);
                SPK.loadDataAlternatif();
            } catch (Exception e) {
            }
        } else {

        }
    }//GEN-LAST:event_btnHapusAlternatifActionPerformed

    private void btnRefreshAActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRefreshAActionPerformed
        tabelAlternatif.clearSelection();
        btnHapusAlternatif.setEnabled(false);
        btnUpdateAlternatif.setEnabled(false);
    }//GEN-LAST:event_btnRefreshAActionPerformed

    private void btnUpdateAlternatifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateAlternatifActionPerformed
        UpdateAlternatif uk = new UpdateAlternatif(this, true);

        int i = tabelAlternatif.getSelectedRow();
        String id = tabelAlternatif.getValueAt(i, 0).toString();
        String alternatif = tabelAlternatif.getValueAt(i, 1).toString();
        String harga = tabelAlternatif.getValueAt(i, 2).toString();
        String tahun = tabelAlternatif.getValueAt(i, 3).toString();
        String cc = tabelAlternatif.getValueAt(i, 4).toString();
        String seater = tabelAlternatif.getValueAt(i, 5).toString();
        String transmisi = tabelAlternatif.getValueAt(i, 6).toString();
        int id_int = Integer.parseInt(id);

        uk.setId(id_int);
        uk.setAlternatif(alternatif);
        uk.setHarga(harga);
        uk.setTahun(tahun);
        uk.setCc(cc);
        uk.setSeater(seater);
        uk.setTransmisi(transmisi);

        uk.setVisible(true);
    }//GEN-LAST:event_btnUpdateAlternatifActionPerformed

    private void rtfcariAlternatifFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_rtfcariAlternatifFocusLost
        rtfcariAlternatif.setText("Cari ALternatif");
    }//GEN-LAST:event_rtfcariAlternatifFocusLost

    private void rtfcariAlternatifMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rtfcariAlternatifMouseClicked
        if (rtfcariAlternatif.getText().equalsIgnoreCase("Cari Alternatif")) {
            rtfcariAlternatif.setText("");
        }
    }//GEN-LAST:event_rtfcariAlternatifMouseClicked

    private void rtfcariAlternatifMouseExited(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_rtfcariAlternatifMouseExited
        if (rtfcariAlternatif.getText().equalsIgnoreCase("Cari Alternatif")) {
            rtfcariAlternatif.setText("");
        }
    }//GEN-LAST:event_rtfcariAlternatifMouseExited

    private void rtfcariAlternatifActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rtfcariAlternatifActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_rtfcariAlternatifActionPerformed

    private void rtfcariAlternatifKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_rtfcariAlternatifKeyReleased
        String key = rtfcariAlternatif.getText();
        String where = " WHERE "
                + "alternatif LIKE '%" + key + "%' OR "
                + "harga LIKE '%" + key + "%' OR "
                + "tahun LIKE '%" + key + "%' OR "
                + "cc LIKE '%" + key + "%' OR "
                + "seater LIKE '%" + key + "%' OR "
                + "transmisi LIKE '%" + key + "%'";
        cariAlternatif(where);
    }//GEN-LAST:event_rtfcariAlternatifKeyReleased

    private void tabelAlternatifMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tabelAlternatifMouseClicked
        int i = tabelAlternatif.getSelectedRow();
        if (i != -1) {
            btnHapusAlternatif.setEnabled(true);
            btnUpdateAlternatif.setEnabled(true);
        }
    }//GEN-LAST:event_tabelAlternatifMouseClicked

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         dispose(); // Menutup jendela saat ini
        home Home = new home();
        Home.setVisible(true); // Menampilkan menu login
    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(SPK.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new SPK().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private app.ButtonTrans btnHapusAlternatif;
    private app.ButtonTrans btnHapusK;
    private app.ButtonTrans btnRangking;
    private app.ButtonTrans btnRefreshA;
    private app.ButtonTrans btnRefreshK;
    private app.ButtonTrans btnTambahAlternatif;
    private app.ButtonTrans btnTambahK;
    private app.ButtonTrans btnUpdateAlternatif;
    private app.ButtonTrans btnUpdateK;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel27;
    private javax.swing.JPanel jPanel28;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel32;
    private javax.swing.JPanel jPanel33;
    private javax.swing.JPanel jPanel34;
    private javax.swing.JPanel jPanel35;
    private javax.swing.JPanel jPanel36;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane6;
    private app.RoundedTextField rtfcariAlternatif;
    private app.RoundedTextField rtfcariKriteria;
    private static javax.swing.JTable tabelAlternatif;
    private static javax.swing.JTable tabelKriteria;
    private javax.swing.JTable tabelSPK;
    // End of variables declaration//GEN-END:variables

    public static void loadDataKriteria() {
        try {
            // table design
            Object[][] data = null;
            Object[] header = {"ID", "KRITERIA", "BOBOT", "LABEL"};
            DefaultTableModel model = new DefaultTableModel(data, header);
            tabelKriteria.setModel(model);
            JTableHeader tableHeader = tabelKriteria.getTableHeader();
            Font headerFont = tableHeader.getFont();
            Font newFont = new Font(headerFont.getName(), Font.BOLD, 24); // Mengatur ukuran font di sini
            tableHeader.setFont(newFont);

            //read Data from MySQL DB
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM kriteria ";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = rs.getInt("id");
                String kriteria = rs.getString("kriteria");
                double bobot = rs.getDouble("bobot");
                String label = rs.getString("label");
                Object[] rowData = {id, kriteria, bobot, label};
                model.addRow(rowData);
            }

        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }

    public static void cariKriteria(String where) {
        try {
            // table design
            Object[][] data = null;
            Object[] header = {"ID", "KRITERIA", "BOBOT", "LABEL"};
            DefaultTableModel model = new DefaultTableModel(data, header);
            tabelKriteria.setModel(model);

            //read Data from MySQL DB
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM kriteria " + where;
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = rs.getInt("id");
                String kriteria = rs.getString("kriteria");
                double bobot = rs.getDouble("bobot");
                String label = rs.getString("label");
                Object[] rowData = {id, kriteria, bobot, label};
                model.addRow(rowData);
            }

        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }

    public static void cariAlternatif(String where) {
        try {
            // table design
            Object[][] data = null;
            Object[] header = {"ID", "ALTERNATIF", "HARGA", "TAHUN", "MESIN", "SEATER", "TRANSMISI"};
            DefaultTableModel model = new DefaultTableModel(data, header);
            tabelAlternatif.setModel(model);

            //read Data from MySQL DB
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM alternatif " + where;
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id_ = rs.getInt("id");
                String alternatif = rs.getString("alternatif");
                double harga = rs.getDouble("harga");
                double tahun = rs.getDouble("tahun");
                double cc = rs.getDouble("cc");
                double seater = rs.getDouble("seater");
                double transmisi = rs.getDouble("transmisi");
                Object[] rowData = {id_, alternatif, harga, tahun, cc, seater, transmisi};
                model.addRow(rowData);
            }

        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }

    public static void loadDataAlternatif() {
        try {
            // table design
            Object[][] data = null;
            Object[] header = {"ID", "ALTERNATIF", "HARGA", "TAHUN", "MESIN", "SEATER", "TRANSMISI"};
            DefaultTableModel model = new DefaultTableModel(data, header);
            tabelAlternatif.setModel(model);
            JTableHeader tableHeader = tabelAlternatif.getTableHeader();
            Font headerFont = tableHeader.getFont();
            Font newFont = new Font(headerFont.getName(), Font.BOLD, 24); // Mengatur ukuran font di sini
            tableHeader.setFont(newFont);

            //read Data from MySQL DB
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM alternatif";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                int id = rs.getInt("id");
                String alternatif = rs.getString("alternatif");
                double harga = rs.getDouble("harga");
                double tahun = rs.getDouble("tahun");
                double cc = rs.getDouble("cc");
                double seater = rs.getDouble("seater");
                double transmisi = rs.getDouble("transmisi");
                Object[] rowData = {id, alternatif, harga, tahun, cc, seater, transmisi};
                model.addRow(rowData);
            }

        } catch (SQLException e) {
            System.err.println(e.getMessage());
        }
    }

    private void SPK_SAW() {
        try {
            // Table design
            Object[] header = {"NOMOR", "PRODUK", "HASIL"};
            Object[][] data = null;
            DefaultTableModel model = new DefaultTableModel(data, header);
            tabelSPK.setModel(model);
            JTableHeader tableHeader = tabelSPK.getTableHeader();
            Font headerFont = tableHeader.getFont();
            Font newFont = new Font(headerFont.getName(), Font.BOLD, 24); // Set the font size here
            tableHeader.setFont(newFont);

            // Read Data from DB
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT * FROM alternatif";
            ResultSet rs = st.executeQuery(query);

            // Count the number of rows in the ResultSet
            int rowCount = 0;
            while (rs.next()) {
                rowCount++;
                String alternatif = rs.getString("alternatif");
                double harga = rs.getDouble("harga");
                double tahun = rs.getDouble("tahun");
                double cc = rs.getDouble("cc");
                double seater = rs.getDouble("seater");
                double transmisi = rs.getDouble("transmisi");

                double norm_harga = label("harga").equals("cost") ? MIN("harga") / harga : harga / MAX("harga");
                double norm_tahun = label("tahun").equals("cost") ? MIN("tahun") / tahun : tahun / MAX("tahun");
                double norm_cc = label("cc").equals("cost") ? MIN("cc") / cc : cc / MAX("cc");
                double norm_seater = label("seater").equals("cost") ? MIN("seater") / seater : seater / MAX("seater");
                double norm_transmisi = label("transmisi").equals("cost") ? MIN("transmisi") / transmisi : transmisi / MAX("transmisi");

                double bobot_akhir = (bobot("harga") * norm_harga) + (bobot("tahun") * norm_tahun) + (bobot("cc") * norm_cc) + (bobot("seater") * norm_seater) + (bobot("transmisi") * norm_transmisi);

                Object[] rowData = {rowCount, alternatif, bobot_akhir};
                model.addRow(rowData);
            
                TableRowSorter<DefaultTableModel> sorter = new TableRowSorter<>(model);
                tabelSPK.setRowSorter(sorter);

                List<RowSorter.SortKey> sortKeys = new ArrayList<>();
                int columnIndexToSort = 2; // Kolom "HASIL" berada pada indeks 2 dalam model tabel
                sortKeys.add(new RowSorter.SortKey(columnIndexToSort, SortOrder.DESCENDING)); // Mengurutkan secara menurun
                sorter.setSortKeys(sortKeys);
            }
        } catch (Exception e) {
            // Penanganan kesalahan
        }
    }

    private String label(String kriteria) {
        String label = "cost";
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT label FROM kriteria WHERE kriteria='" + kriteria + "'";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                label = rs.getString("label");
            }
            return label;

        } catch (Exception e) {
        }

        return label;
    }

    private double bobot(String kriteria) {
        double bobot = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT bobot FROM kriteria WHERE kriteria='" + kriteria + "'";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                bobot = rs.getDouble("bobot");
            }
            return bobot;

        } catch (Exception e) {
        }

        return bobot;
    }

    private double MIN(String kriteria) {
        double min = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT MIN(" + kriteria + ") AS minVal FROM alternatif";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                min = rs.getDouble("minVal");
            }
            return min;

        } catch (SQLException e) {
        }

        return min;
    }

    private double MAX(String kriteria) {
        double max = 0;
        try {
            Connection c = Koneksi.konekKeDB();
            Statement st = c.createStatement();
            String query = "SELECT MAX(" + kriteria + ") AS maxVal FROM alternatif";
            ResultSet rs = st.executeQuery(query);
            while (rs.next()) {
                max = rs.getDouble("maxVal");
            }
            return max;

        } catch (SQLException e) {
        }

        return max;
    }
}
